{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response.data, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n});\nexport const apiService = {\n  // Auth\n  exchangeToken: code => api.post('/auth/token', {\n    code\n  }),\n  getCurrentUser: () => api.get('/auth/user'),\n  logout: () => api.post('/auth/logout'),\n  // Profile\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: data => api.post('/users/profile', data),\n  getUser: id => api.get(`/users/${id}`),\n  // Matches\n  getMatches: params => api.get('/matches', {\n    params\n  }),\n  findMatches: data => api.post('/matches/find', data),\n  getMatch: id => api.get(`/matches/${id}`),\n  likeMatch: id => api.post(`/matches/${id}/like`),\n  rateMatch: (id, data) => api.post(`/matches/${id}/rate`, data),\n  // Sessions\n  getSessions: params => api.get('/sessions', {\n    params\n  }),\n  createSession: data => api.post('/sessions', data),\n  getSession: id => api.get(`/sessions/${id}`),\n  updateSession: (id, data) => api.patch(`/sessions/${id}`, data),\n  joinSession: id => api.post(`/sessions/${id}/join`),\n  startSession: id => api.post(`/sessions/${id}/start`),\n  endSession: id => api.post(`/sessions/${id}/end`),\n  // Messages\n  getChats: params => api.get('/messages/chats', {\n    params\n  }),\n  getMessages: (chatId, params) => api.get(`/messages/${chatId}`, {\n    params\n  }),\n  sendMessage: (chatId, data) => api.post(`/messages/${chatId}`, data),\n  startChat: userId => api.post(`/messages/start/${userId}`)\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","data","error","_error$response","_error$response2","status","removeItem","window","location","href","Promise","reject","apiService","exchangeToken","code","post","getCurrentUser","get","logout","getProfile","updateProfile","getUser","id","getMatches","params","findMatches","getMatch","likeMatch","rateMatch","getSessions","createSession","getSession","updateSession","patch","joinSession","startSession","endSession","getChats","getMessages","chatId","sendMessage","startChat","userId"],"sources":["/Users/maeve/Projects/study-buddy-matcher/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response.data,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('auth_token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error.response?.data || error);\n  }\n);\n\nexport const apiService = {\n  // Auth\n  exchangeToken: (code) => api.post('/auth/token', { code }),\n  getCurrentUser: () => api.get('/auth/user'),\n  logout: () => api.post('/auth/logout'),\n\n  // Profile\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (data) => api.post('/users/profile', data),\n  getUser: (id) => api.get(`/users/${id}`),\n\n  // Matches\n  getMatches: (params) => api.get('/matches', { params }),\n  findMatches: (data) => api.post('/matches/find', data),\n  getMatch: (id) => api.get(`/matches/${id}`),\n  likeMatch: (id) => api.post(`/matches/${id}/like`),\n  rateMatch: (id, data) => api.post(`/matches/${id}/rate`, data),\n\n  // Sessions\n  getSessions: (params) => api.get('/sessions', { params }),\n  createSession: (data) => api.post('/sessions', data),\n  getSession: (id) => api.get(`/sessions/${id}`),\n  updateSession: (id, data) => api.patch(`/sessions/${id}`, data),\n  joinSession: (id) => api.post(`/sessions/${id}/join`),\n  startSession: (id) => api.post(`/sessions/${id}/start`),\n  endSession: (id) => api.post(`/sessions/${id}/end`),\n\n  // Messages\n  getChats: (params) => api.get('/messages/chats', { params }),\n  getMessages: (chatId, params) => api.get(`/messages/${chatId}`, { params }),\n  sendMessage: (chatId, data) => api.post(`/messages/${chatId}`, data),\n  startChat: (userId) => api.post(`/messages/start/${userId}`),\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}